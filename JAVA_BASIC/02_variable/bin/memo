String str = “기차”;

String str = new String(“기차”);

String str = “기차” + “칙칙폭폭”;
String str = new String(“기차” + “칙칙폭폭”);

< String에서 + 는 연결의 의미>
 
String str = “기차” + 123 + 45 + “출발”;
String str = 123 + 45 + “기차“ + “출발”;

=> 결과가 다르다.
// 숫자가 문자열뒤에 나오면 더이상 숫자가 아니다. (문자열 역할)
// 또 다른 자료형이 문자열 뒤에 나오면 더이상 그 자료형의 역할을 하지 못한다.

<형변환 - 값의 자료형을 바꾸는 것>
※boolean 형은 제외.

문자도 숫자로 형변환이 가능.

컴퓨터의 값 처리 원칙
같은 종류 자료형만 대입 가능
같은 종류 자료형만 계산 가능
계산의 결과도 같은종류의 값이 나와야함

=> 이러한 원칙을 지키지 않을 경우에 형 변환이 필요함.

자동 형변환
-크기가 작은 자료형을 크기가 더 큰 자료형에 집어넣는 경우

1	2	4	8 	 4	8
byte -> short -> int -> long -> float -> duble

long -> float . 
8byte 정수 -> 4byte 실수

ex) int a = 12;
    double d = 3.3;
    double result = a + d;

    a+d -> 12 + 3.3 -> 12.0 + 3.3 -> 15.3

※단, byte와 short 자료형 값의 계산 결과는 
무조건 int로 처리한다.

강제 형변환
- 크기가 큰 자료형을 크기가 더 작은 자료형에 집어넣는 경우
- 데이터 손실이 발생할 수 있음
-> 데이터의 변형,손실을 감수하고 강제 변환

double temp;
int name = (int)temp;

(강제 형변환을 할때 형변환 자료형(int)명시를 꼭 해줘야 한다.)

Stack		Heap		Static


Stack : (쌓다.)

메소드를 실행하게 되면 차곡차곡 쌓이게 된다.
Stack 개발자영역이라고 하지않고 Heap은 개발자영역이라고 한다.
new연산자를 쓰면 heap이라는 영역에 공간을 할당 할 수 있다.

Heap,Static => 객체라는 단원에 가서 알려주신다.

int a;  --> Statck 이라는 공간에생긴다. ㅁ
a = 10;  대입하는순간 ㅁ 공간에 10이라는 값이 들어간다.


<출력 메소드>

System.out.print()
()안의 변수,문자,숫자,논리 값을 모니터에 출력해주는 메소드

System.out.println()
print문과 동일하게 출력은 해주지만 출력 후 자동으로 출력창에 
줄바꿈을 해주는 메소드


<Scanner>
사용자로부터 입력되는 정수,실수,문자열을 처리하는 클래스

import java.util.Scanner;

Scanner sc = new Scanner(System.in);
( System.in/ System.out 자바에서 제공하는 표준입출력)







