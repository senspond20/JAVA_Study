변수 연산자 제어문
배열 2차원 배열

객체.

현실세계는 사물이나 개념처럼 독립되고 구분되는 각각의 객체로 이루어져 있으며, 발생하는 모든 사건들은 객체간의 상호작용으로 이 개념을 컴퓨터로 옮겨놓아 만들어낸 것이 객체지향 언어

지향. => 그쪽길로 나아간다.
반대말)지양.

현실세계에 있는 모든것들~ 객체
객체끼리 상호작용.


객체지향 프로그래밍

자바에서의 객체.
클래스에 정의된 내용대로 new연산자를 통해
메모리 영역에 생성된것.(Heap영역)

자료형[] 배열명 = new 자료형[]; ==> 객체가 아니다.

--> 자료형.

변수 (1개의 자료형,1개의 데이터)
배열 (1개의 자료형, 여러개의 데이터)
구조체 (여러개의 자료형, 여러개의 데이터)
<밖에서 접근 가능.>

클래스 
=> 클래스 내부의 데이터를 연산 처리하는 기능을 포함
<접근제한>

밖에서 함부로 접근하지 못하게 캡슐화(데이터 보호)
는 해놓고 데이터 연산이 가능할 수 있도록 
구조체안에 기능까지 넣어놓은것

추상화(abstarction)
유연성을 확보하기 위해 구체적인 것은 제거.
프로그램에서 필요한 공통점을 추출
불필요한 공통점을 제거하는 과정


클래스
학생이 가지는 공통적인
요소를 추상화 하여 클래스를 정의

객체(Instance)
현실세계에 존재하는 고유 객체를
메모리에 할당

객체지향 3대 특징
1.캡슐화(Encapsulation)
멤버 변수에 대한 접근권한은 private 
연산처리하는 함수들을 내부에 작성.

2.상속 (Inheritance)
3.다형성 (Polymorphism) -> 상속이 전제된 상태에서가능
4.추상화


캡슐화.
맴버 변수에 대한 접근 권한은 private을 원칙으로 한다.
멤버 함수는 클래스 밖에서 접근할 수 있도록 public으로
설정한다.

패키지(클래스 혹은 인터페이스의 묶음)
모든 클래스는 하나의 패키지에 속하며, 패키지가 선언되지
않은 클래스는 자동으로 이름없는 패키지(default)에 속하게 됨

클래스 다이어그램
Peson
-pNo      : String
-name     : String
-gender   : char
-address  : String
-phone    : String
-age      : int

객체
클래스에 정의된 내용대로 메모리에 할당된 결과물(Object)

             instantiation              
클래스 =====> 인스턴스화 =====> 객체(Instanse)


new연산자와 생성자를 사용하여
객체 생성 시 heap메모리 공간에
서로 다른 자료형의 데이터가 연속으로 나열/할단된 객체공간


Stack 		Heap 		Static
		0x0123
0x0123		Student type객체


class 4바이트.


// . . 
1. package문 (폴더)

2. import 문
import 

3. 

필드 표현식

[접근 제한자][예약어] class 클래스명{
	[접근제한자][예약어] 자료형 변수명[=초기값];
}
		(나 자신)
public    해당 클래스 내부 ,같은 패키지내, 후손 클래스 내 ,전부 접근가능.
	  
protected 해당 클래스 내부, 같은 패키지내,후손 클래스 내에서만 접근가능
(default) 해당 클래스 내부, 같은 패키지내에서만 접근가능
private   해당 클래스 내부에서만 접근가능

// 시험문제
// 서술형.
개념적인 것들 서술형

// 문제해결형 시나리오.
프로그램이 작동되지 않았다.
무엇때문에 동작하지 않았고 조치를 하고 서술하라.
이클립스로 하지 않는다.

컴퓨터로 시험.
1/21일

static -> 공유할 목적의 필드에 사용한다.  
프로그램 시작시 정적 메모리 영역에 자동 할당되는 멤버에 적용.
클래스 이름만 있으면 그안으로 들어갈 수 있다.

다른것들은 객체를 생성할때 메모리에 넣지만..


final -> 종단의 의미
변수,메소드,클래스에도 들어갈 수 있다.

필드에 쓰면 하나의 값만 저장할 수 있도록 상수역할 한다.


public final static 어디서도 사용 가능한 상수.


(MVC 패턴. 싱글턴 패턴)

	   (직접 값을 넣어주는것)
JVM      => 명시적  => 클래스
기본값      초기값     초기화 블록
                       초기값

인스턴스 변수
JVM 		=> 명시적 => 인스턴스   -> 생성자를 통한 초기값
기본값             초기값    초기화 블록
			     초기값







