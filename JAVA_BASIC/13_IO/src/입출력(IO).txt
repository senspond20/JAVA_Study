-입출력(IO)

컴퓨터와 프로그램 사이에 데이터를 주고 받는 것)
 
Input과 Output의 약자, 컴퓨터 내부 또는 외부 장치와 프로그램 간의
데이터를 주고 받는 것
장치와 입출력을 위해서는 하드웨어 장치에 직접 접근이 필요한데 다양한
매체에 존재하는 데이터들을 사용하기 위해 입출력 데이터를 처리할
공통적인 방법으로 스트림 이용

(스트림)

모든 스트림은 단방향이며 각각의 장치마다 연결 할 수 있는 스트림 존재
하나의 스트림으로 입출력을 동시에 수행 할 수 없으므로
동시에 수행하려면 2개의 스트림 필요.

바이트 기반 / 
입력(input); 출력(output)

문자 기반 (2byte씩 끊어서 읽는것)/
입력(Reader); 출력 (Writher)

데이터의 최소단위 : 비트
8비트 -> 1바이트 

~~~ Stream )

뒤에 Stream이 붙으면 무조건 바이트 기반
뒤에 Stream이 안붙으면 문자 기반

(기반 스트림 / 보조 스트림) -> 생성자의 매개변수만 보면 된다.
				https://docs.oracle.com/javase/8/docs/api/

기반 스트림 = 실제로 스트림에 데이터가 왔다 갔다 하는것
보조 스트림 = 기반스트림을 도와주는 역할을 하는것
		(데이터가 왔다갔다 하지 않는다.)

생성자의 매개변수에 inpuStream, outStream, Reader, Writer.

InputStream 바이트 기반 입력 스트림의 최상위 클래스로 추상클래스임
OutputStream 바잍 기반 출력 스트림의 최상위 클래스로 추상클래스임

// File 클래스 //

Buffer

성능 향상 보조 스트림
느린 속도로 인해 입출력 성능에 영향을 미치는 입출력 소스를 이용하는 경우 사용,
한꺼번에 작업을 하여 실행 성능 향상(입출력 횟수 줄임)

객체는 문자가 아니므로( 데이터 형식이 아니므로) 바이트 기반 스트림으로 데이터를 변경해주는 직렬화 필요

Serializable 인터페이스를 implements 하여 구현
객체 직렬화 시 private 필드를 포함한 모든 필드를 바이트로 변환하지만
transient 키워드를 사용한 필드는 직렬화에서 제외

반대말 => 역직렬화. (파일내용이 조금이라도 바뀌였으면 실패할 수 있어서 조심해야한다.
SerialVerisonUID 필드 (명시 권장)
=> 역직렬화에서 예상하지 못한 InvalidClassException을 유발 할 수 있기에



 