컬렉션(Collection)

안에 들어가있는 자료구조의 로직을 생각하지 않고
 이미 구현이 되어있는것을 쓸 수가 있다.
 
 메모리상에서 자료를 구조적으로 처리하는 방법을 자료구조라 일컫는데,
 컬렉션(Collection)은 자바에서 제공하는 자료구조를 담당하는 프레임워크
 
 추가,삭제,정렬 등의 기능처리가 간단하게 해결 되어 자료구조적 알고리즘을 구현할 필요 없음
 java.util 패키지에 포함되며, 인터페이스를 통해 정형화된 방법으로 다양한 컬렉션 클래스 이용 가능'
 
 자료구조 - 데이터(자료)를 메모리에서 구조적으로 처리하는 방법론

단순구조 : 정수,실수,문자,문자열
선형구조 : 리스트,연결리스트,스택,큐,덱
비선형구조 : 트리,그래프
파일구조 : 순차파일,색인파일,직접파일

배열의 문제점 & 컬렉션의 장점

배열의 문제점
1. 한번 크기를 지정하면 변경할 수 없다.
	필요에 따라 공간을 늘리거나 줄일 수 없음.
	공간 크기가 부족하면 에러가 발생 -> 할당 시 넉넉한 크기로 할당하게 됨 (메모리 낭비)
2. 기록된 데이터에 대한 중간 위치의 추가, 삭제가 불편하다.
3. 한 타입의 데이터만 저장 가능하다.

컬렉션의 장점
1. 저장하는 크기의 제약이 없다.
2. 추가, 삭제, 정렬 등의 기능 처리가 간단하게 해결된다.
	자료를 구조적으로 처리 하는 자료구조가 내장되어 있어 알고리즘 구현이 필요없음
3. 여러 타입의 데이터가 저장 가능하다. ====> 사실상 잘 사용하지 않는다.
   (꺼낼 떄마다 무슨타입인지 확인해야하는것이 번거롭다.) ==> 제네릭 사용
	객체만 저장 할 수 있기 때문에 필요에 따라 기본 자료형을 저장해야 하는 경우 Wrapper클래스 사용
	
	* 1,2 번의 장점떄문에 사용하지 3번 용도로는 잘 쓰지 않는다.
	
컬렉션의 주요 인터페이스
Collection -------
List 			Set				Map
ArrayList		HashSet			HashMap	
Vector			TreeSet			Hashtable
LinkedList						TreeMap
								Properties

Map 은 Collection 이라는 인터페이스를 상속받고 있는 List,Set과는 다르다.

Collection    List계열       순서를 유지하고 저장   	      ArrayList, Vector, LinkedList
				                중복 저장 가능
		      Set 계열       순서를 유지하지 않고 저장	  	  HashSet, LinkedHashSet, TreeSet
		   	       	         중복 저장 안됨
	Map 계열				 키와 값의 쌍으로 저장			  HashMap, Hashtable, TreeMap, Properties
					         키는 중복 저장 안됨
					         순서 유지가 안된다.
					         
					         키는 셋방식 -(중복이 안됨)
					         
List 자료들을 순차적으로 나열한 자료구조, 인덱스로 관리
	 중복해서 객체 저장 가능
	 구현클래스로 ArrayList와 Vector, LinkedList가 있음
	 
	 
ArrayList 동기화(Synchronized)를 제공하지 않음
	List의 후손으로 초기 저장용량은 10으로 자동 설정 / 따로 지정 가능
	저장 용량을 초과한 객체들이 들어오면 자동으로 증가/ 고정도 가능
	
Vector ArrayList의 구버번, 동기화 제공
		
LinkedList List의 후손으로, 인접 참조를 링크해 체인처럼 관리
			정 인덱스에서 객체를 제저가하거나 추가하게 되면 바로 앞/ 뒤
			링크만 변경하면 되기 때문에 객체 삭제와 삽입이 빈번하게 일어나는 곳에서는 ArrayList보다 성능이 좋음
(단반향 ) -> -> - >
(양반향 ) <- ->

 
Set 저장 순서가 유지되지 않고 중복 객체도 저장하지 못하게 하는 자료구조
	null도 중복을 허용하지 않기 떄문에 1개의 null만 저장
	
	해싱기법 - 컴퓨터에서 자료를 찾을떄 좀더 빠르게 찾을 수 있게 하는 기법
	해싱함수 -> 해싱기법을 사용하기 위해서 
	
	동일객체뿐만 아니라 동등객체도 중복 저장하지 않는다.
	동일 객체 : 변수는 다른데 주소값이 같은 객체 
	동등 객체 : 주소값은 다른데.. 안에 들어가 있는 데이터가 같은 객체
HashSet
Set에 객체를 저장할떄 hash함수를 사용하여 처리 속도가 빠름
동일 객체 뿐 아니라 동등 객체도 중복하여 저장하지 않음

LinkedHashset
HashSet과 거의 동일하지만
Set에 추가되는 순서를 유지한다는 점이 다름

TreeSet TreeMap
검색 기능을 강화시킨 컬렉션으로, 계층 구조를 활용해 이진 트리 자료구조를 구현하여 제공
내부적으로 레드블랙 트리로 구현
넣으면서 정렬이 된다. => TreeSet TreeMap 자동적으로 정렬이 된다.

	 
Iterator 1회성이다. 단반향.


ListIterator 양방향 특징// 
// 사실 Set에서는 못쓴다.
// -> List에서만 쓸 수 있다.
 
상속 구조 때문에 iterator() 메소드는 List와 Set 계열에서만 사용
=> Map의 경우 Set 또는 List화 시켜서 iterator()를 사용해야 함

Map

키와 값으로 구성. 키와 값은 모두 객체
키는 중복저장 허용 안함(set방식)
값은 중복저장 허용(List방식)
키가 중복되는 경우, 기존에 있는 키에 해당하는 값을 덮어씌움
구현 클래스 . HashMap, Hashtable, LinkedHashMap, Properties, TreeMap

Entry 키와 값 자체를 의미;

키와 값을 가지고 오고 싶을때 Map안에 있는 Entry를 가져온다. (Map.Entry에서)

Collection을 상속받지 않아서 list의 메소드들과 다르다.

키 객체는 HashCode()와 equals() 를 재정의해 동등 객체가 될 조건을 정해야함
떄문에, 키 타입은 hashCode와 equauls()메소드가 재정의되어 있는 String/Integer(Wrapper class)타입을 주로 사용

Map <K,V> map = new HashMap <K, V>();
 
Hashtable
키 객체 만드는 법은 HashMap 과 동일하나 Hashtable 은 스레드 동기화가 된 상태이기 떄문에,
복수의 스레드가 동시에 Hashtable에 접근해 객체를 추가, 삭제 하더라도 스레드에 안전 (Thread safe)

ArrayList 의 구버전 : Vector
Listlterator 의 구버전 : Enumeration
HashMap 의 구버전 : Hashtable


TreeMap -> Key를 기준으로 정렬 ;

Properties 
키와 값을 String 타입으로 제한한 Map컬렉션
주로 Properties 는 프로퍼티 파일을 읽어 들일 떄 주로 사용

프로퍼티(*.properties) 파일
- 옵션 정보, 데이터베이스 연결정보, 국제화(다국어) 정보를 기록하여 텍스트 파일로 활용
- 애플리케이션에서주로 변경이 잦은 문자열을 저장하여 관리하기 떄문에 유지보수를 편리하게 만들어 줌
- 키와 값이 '=' 기호로 연결디어 있는 텍스트 파일로 ISO 8859-1 문자셋으로 저장되고,
   한글은 유니코드(Unicode) 로 변환되어 저장.
 
Stack(후입선출 (LIFO : Last In First Out) 구조로 JVM Stack 메모리가 Stack 구조로 되어 있음)
Stack<E> stack = new Stack<E>();

Queue
Queue() queue = new LinkedList();

Deque
큐와 스택의 성질을 모두 가지고 있는 구조로 검색과 같은 반복적인 문제에 특히 유용한 데이터 구조

타입추론
List<T> list = new List<>();
앞에있는 타입을 보고 뒤에있는 타입을 추론


  
  


