네트워크

- 네트워크
여러 대의 컴퓨터를 통신 회선으로 연결한 것
(홈 네트워크, 지역 네트워크, 인터넷 등이 해당)

서버와 클라이언트
네트워크로 연결된 컴퓨터간의 관계를 역할로 구분한 개념
서버: 서비스를 제공하는 프로그램으로 클라이언트의 연결을 수락하고
	요청 내용을 처리 후 응답을 보내는 역할
클라이언트: 서비스를 받는 프로그램으로 네트워크 데이터를
		필요로 하는 모든 어플리케이션이 해당 됨

IP 주소
네트워크 상에서 컴퓨터를 식별하는 번호로 네트워크
어댑터(랜카드) 마다 할당 되어 있음	


/ 소켓 -

/ TCP - 데이터 전송 속도가 느리지만 정확하고 안정적으로 전달할 수 있는 연결 지향적 프로토콜
데이터를 보낼때와 받을때 데이터가 유효한지 아닌지까지 확인할 수 있는 데이터를 같이 보낸다.

/ UDP - 데이터 전송 속도가 빠르지만 신뢰성 없는 데이터를 전송하는 비연결 지향적 프로토콜

TCP 소켓 프로그래밍

클라이언트와 서버간의 1:1 소켓 통신
서버가 먼저 실행 되어 클라이언트의 요청을 기다려야 하고
서버용 프로그램과 클라이언트용 프로그램을 따로 구현해야 함

java.net 패키지에서 SetverSocket 과 Socket 클래스 제공

서버소켓은 연결만 하는 용도고 
응답 대기상태에서 클라이언트 요청시 accept()로 수락
-> 실제 클라이언트랑 통신하는 소켓 객체 생성


--- 서버용 TCP 소켓 프로그래밍 순서
1. 서버의 포트번호 정함
2. 서버용 소켓 객체 생성
3. 클라이언트 쪽에서 접속 요청이 오길 기다림
4. 접속 요청이 오면 요청 수락 후 해당 클라이언트에 대한 소켓 객체 생성
5. 연결된 클라이언트와 입출력 스트림 생성
6. 보조 스트림을 통해 성능 개선(선택)
7. 스트림을 통해 읽고 쓰기
8. 통신 종료.

--- 클라이언트용 TCP 소켓 프로그래밍 순서
1. 서버의 IP주소와 서버가 정한 포트번호를 매개변수로 하여 클라이언트용 소켓 객체 생성
2. 서버와의 입출력 스트림 오픈
3. 보조 스트림을 통해 성능 개선
4. 스트림을 통해 읽고 쓰기
5. 통신 종료


& CMD
path : 환경변수 설정값을 보여주는 명령어
ipconfig
CD / change Directory .폴더 변경

UDP 소켓 프로그래밍
UDP는 연결 지향적이지 않기 때문에 연결 요청을 받아줌
서버 소켓이 필요 없음
DatagramPacket 으로 변환된 데이터 주고 받음
